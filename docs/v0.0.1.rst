Release 0.0.1
=============

The first release, we will have the following features ready:

- ability to find new commit from the repository
- be able to execute the unit test cases automatically
- allow user to customize the test scripts.
- ability to store the test result locally, in builds folder
- ability to save the test result on wiki page.

Overview and Structure
----------------------

The ci recipe will watch a single git repository, which is hosting
various of projects in subfolders.
Each subfolder will be self surfficient project.
It could implement different modules, packages, plugins, etc
It could use different languages, Python, PHP, node.js, JavaScript,
etc.
The git repository will have the structure like the following::

  projects\
    |- python-project-1\
         |- .cicfg
    |- nodejs-project-2\
         |- .cicfg
    |- php-project-3\
    |- python-project-4\
    |- wordpress-plugin-6\
    !- mediawiki-extension-1\
    |- java-project-1\

Options
-------

:working-folder:
  the working folder, default is **/usr/ci/projects**.
  the build log (.buildlog) will save here.

:builds-folder:
  where we build and test. default is **/usr/ci/builds**.
  each build will have a subfolder in this folder.
  for example, the build one will be in folder
  **/usr/ci/builds/1**

:save-builds:
  how many builds we will save? default is **0 **,
  which means do not save any build.

:mwrc:
  the resource file to connect to mediawiki site

Process flow
------------

Steps:

- keep a working folder, git pull to get the lastest version
- **.buildlog** will be tracked in working folder.
- compare git log and build log to get the commit id for 
  next build.
- analyze the commit to find out the project folder.
- create the build folder in **builds-folder**.
- clone only the project folder up to the build commit.
  using git sparse checkout (`sparse checkout tutorial`_)
- execute the test scripton project folder.
- analyze the result and save to wiki page.

The sparse checkout is supported since Git version 1.7.

Global Settings
---------------

git config url::

  $ git config --global url."https://".insteadof git://
  $ git config --global http.proxy http://10.1.1.1:3128
  $ git config --global https.proxy http://10.1.1.1:3128

npm proxy::

  $ npm config set proxy http://10.1.1.1:3128 --global
  $ npm config set https-proxy http://10.1.1.1:3128 --global

need create file **~/.bowerrc**, which be used for all projects.
it will have the following content::

  {
    "proxy":"http://10.1.1.1:3128",
    "https-proxy":"http://10.1.1.1:3128"
  }

Code Examples
-------------

quick memo for using fabric.local to do git sparse checkout.
::

  # git sparse checkout based on commit detail.
  with lcd(build_folder):
      r = local('git init >> log', True)
      r = local('git remote add -f %s %s >> log' % 
                ('origin', remote), True)
      r = local('git config core.sparsecheckout true >> log', 
                True)
      r = local('echo %s/ >> .git/info/sparse-checkout' %
                subfolder, True)
      r = local('git pull origin %s >> log' % branch, True)
      r = local('git checkout %s >> log' % commit_id, True)
      r = local('git config url."https://".insteadof git://', 
                True)
      #r = local('ls -la %s/%s/..' % (build_folder, subfolder), 
          #          False)
  
  .. _sparse checkout tutorial: http://jasonkarns.com/blog/subdirectory-checkouts-with-git-sparse-checkout/
